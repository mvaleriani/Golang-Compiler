"Go's basic types are"
    bool
    string
    int  int8  int16  int32  int64
    uint uint8 uint16 uint32 uint64 uintptr
        The int, uint, and uintptr types are usually 32 bits wide on 32-bit systems and 64 bits wide on 64-bit systems.
    byte 
        - alias for uint8
    rune 
        - alias for int32
        - represents a Unicode code point
    float32 float64
    complex64 complex128

// ==================================================================================================================================
"Type Conversions"
    - Go assignment between items of different type requires an explicit conversion

// ==================================================================================================================================
"Constants"
    - Declared like variables, but with the const keyword.
    - Can be character, string, boolean, or numeric values.
    - Cannot be declared using the := syntax.

    "Numeric Constants"
        - An untyped constant takes the type needed by its context.

// ==================================================================================================================================
"For Loops"
    x := 0
    for i := 0; i < 10; i++ {
		x += i
    }
    
    - The init and post statements are optional.
        x := 1
        for ; x < 1000; {
            x += x
        }

    - There are no 'while' loops in Go, just use for instead
        x := 1
        for x < 1000 {
            x += x
        }
    
// ==================================================================================================================================
"If Conditionals"
    x := -1
    if x < 0 {
		return true
	}

    - The if statement can start with a short statement to execute before the condition.
    - Variables declared by the statement are only in scope until the end of the if.
        if x := -1; x < 0 {
            return true
        }
    - They are also available within else
        if x := 20; x < 0 {
            return true
        } else{
            return x
        }

// ==================================================================================================================================
"Switch Statements"
    - Go only runs the selected case, not all the cases that follow. 
    - In effect, the break statement that is needed at the end of each case in those languages is provided automatically in Go

    switch num := math.Rand; num {
	case "darwin":
		fmt.Println("OS X.")
	case "linux":
		fmt.Println("Linux.")
	default:
		// freebsd, openbsd,
		// plan9, windows...
		fmt.Printf("%s.", os)
    }
    


	"+": true,
	"&": true,
	"+=": true,
	"&=": true,
	"&&": true,
	"==": true,
	"!=": true,
	"(": true,
	")": true,
	"-": true,
	"|": true,
	"-=": true,
	"|=": true,
	"||": true,
	"<": true,
	"<=": true,
	"[": true,
	"]": true,
	"*": true,
	"^": true,
	"*=": true,
	"^=": true,
	"<-": true,
	">": true,
	">=": true,
	"{": true,
	"}": true,
	"/": true,
	"<<": true,
	"/=": true,
	"<<=": true,
	"++": true,
	"=": true,
	":=": true,
	";": true,
	"%": true,
	">>": true,
	"%=": true,
	">>=": true,
	"--": true,
	"!": true,
	"...": true,
	".": true,
	":": true,
	"&^": true,
	"&^=": true,